import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, MetaData, Table, select, insert

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
sqlite_path = os.path.join(BASE_DIR, "instance", "app.db")

# URL –¥–ª—è SQLite (–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞)
sqlite_url = f"sqlite:///{sqlite_path}"

# URL –¥–ª—è PostgreSQL (Render)
pg_url = os.environ.get("DATABASE_URL")
if pg_url and pg_url.startswith("postgres://"):
    pg_url = pg_url.replace("postgres://", "postgresql://", 1)

if not pg_url:
    raise RuntimeError("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–∫–∏
eng_sqlite = create_engine(sqlite_url)
eng_pg = create_engine(pg_url)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
meta_sqlite = MetaData()
meta_pg = MetaData()

meta_sqlite.reflect(bind=eng_sqlite)
meta_pg.reflect(bind=eng_pg)

# –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏
tables_to_copy = ["user", "message", "poll", "vote"]

with eng_sqlite.connect() as conn_sqlite, eng_pg.connect() as conn_pg:
    for table_name in tables_to_copy:
        if table_name not in meta_sqlite.tables:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SQLite, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        if table_name not in meta_pg.tables:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PostgreSQL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        table_sqlite = Table(table_name, meta_sqlite, autoload_with=eng_sqlite)
        table_pg = Table(table_name, meta_pg, autoload_with=eng_pg)

        # –î–∞–Ω–Ω—ã–µ –∏–∑ SQLite
        rows = conn_sqlite.execute(select(table_sqlite)).mappings().all()

        if not rows:
            print(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –≤ PostgreSQL
        existing_ids = {r[0] for r in conn_pg.execute(select(table_pg.c.id))}
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        new_rows = [r for r in rows if r['id'] not in existing_ids]

        if new_rows:
            conn_pg.execute(insert(table_pg), new_rows)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(new_rows)} –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –≤ {table_name}")
        else:
            print(f"‚ÑπÔ∏è –í {table_name} –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")

print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
